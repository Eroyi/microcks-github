apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
    {{- include "microcks-pod-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-pod-annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.microcks.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}"
        container: spring
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
        {{- include "microcks-pod-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-pod-annotations" . | nindent 8 }}
    spec:
      containers:
      - name: spring
        image: {{ include "microcks.image" .Values.microcks.image }}
        imagePullPolicy: {{ .Values.microcks.images.pullPolicy }}
        ports:
        - containerPort: {{ .Values.microcks.service.targetPort }}
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod{{ if .Values.microcks.extraProperties }},extra{{ end }}
          - name: SPRING_DATA_MONGODB_URI
            {{- if .Values.externalDependencies.mongodb.enabled -}}
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@{{- include "microcks.mongodb.url" -}}:{{- include "microcks.mongodb.port" }}/${SPRING_DATA_MONGODB_DATABASE}{{ .Values.externalDependencies.mongodb.uriParameters }}
            {{- else -}}
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@{{- include "microcks.mongodb.url" -}}:{{- include "microcks.mongodb.port" }}/${SPRING_DATA_MONGODB_DATABASE}
            {{- end -}}
          - name: SPRING_DATA_MONGODB_USER
            {{- if (include microcks.mongodb.secretRef.secret) }}
            valueFrom:
              secretKeyRef:
                name: {{- include microcks.mongodb.secretRef.secret -}}
                key: {{- include microcks.mongodb.secretRef.usernameKey -}}
            {{- else }}
            value: {{- include microcks.mongodb.username -}}
            {{- end -}}
          - name: SPRING_DATA_MONGODB_PASSWORD
            {{- if (include microcks.mongodb.secretRef.secret) }}
            valueFrom:
              secretKeyRef:
                name: {{- include microcks.mongodb.secretRef.secret -}}
                key: {{- include microcks.mongodb.secretRef.passwordKey -}}
            {{- else }}
            value: {{- include microcks.mongodb.password -}}
            {{- end -}}
          - name: SPRING_DATA_MONGODB_DATABASE
            value: {{- include "microcks.mongodb.database" | default .Values.appName }}
          - name: POSTMAN_RUNNER_URL
            value: http://{{ .Values.appName }}-postman-runtime:{{ .Values.config.postman-runtime }}
          - name: TEST_CALLBACK_URL
            value: http://{{ .Values.appName }}:{{ .Values.service.targetPort }}
          - name: KEYCLOAK_ENABLED
            {{- if ( include microcks.keycloak.url) -}}
            value: "true"
            {{- else -}}
            value: "false"
            {{- end -}}
          - name: KEYCLOAK_URL
            value: http://{{ include "microcks.keycloak.url" }}
          {{- if and .Values.features.async.enabled }}
          - name: ASYNC_MINION_URL
            value: http://{{ .Values.appName }}-async-minion:8080
          {{- end }}
          - name: KAFKA_BOOTSTRAP_SERVER
            value: "{{- include "microcks.kafka.fullUrl" -}}"
          {{- if and (eq .Values.kafka.install false) (.Values.externalDependencies.kafka.enabled) }}
            {{- if not (eq .Values.externalDependencies.kafka.auth.type "none") }}
            {{- if .Values.externalDependencies.kafka.auth.truststoreSecretRef }}
          - name: KAFKA_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.externalDependencies.kafka.auth.truststoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.externalDependencies.kafka.auth.type "SSL" }}
          - name: KAFKA_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.externalDependencies.kafka.auth.keystoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-keystore"
            {{- end }}
          {{- end }}
          {{- toYaml .Values.microcks.env | nindent 10 }}
        resources:
          {{- toYaml .Values.microcks.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "{{ .Values.appName }}-config"
            mountPath: "/deployments/config"
          {{- if (.Values.config.grpcEnableTLS) }}
          - name: "{{ .Values.appName }}-grpc-certs"
            mountPath: "/deployments/config/grpc"
          {{- end }}
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: "{{ .Values.appName }}-kafka-truststore"
            mountPath: "/deployments/config/kafka/truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: "{{ .Values.appName }}-kafka-keystore"
            mountPath: "/deployments/config/kafka/keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.microcks.customSecretRef }}
          - name: "{{ .Values.microcks.customSecretRef.secret }}"
            mountPath: "/deployments/config/custom/secret"
          {{- end}}
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-config"
          configMap:
            name: "{{ .Values.appName }}-config"
        {{- if (.Values.microcks.grpcEnableTLS) }}
        - name: "{{ .Values.appName }}-grpc-certs"
          secret:
            secretName: "{{ .Values.microcks.grpcSecretRef | default (print .Values.appName "-microcks-grpc-secret") }}"
        {{- end }}
        {{- if eq .Values.features.async.kafka.install false }}
          {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
          {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
        - name: "{{ .Values.appName }}-kafka-truststore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.truststoreSecretRef.secret }}"
          {{- end }}
          {{- end }}
          {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
        - name: "{{ .Values.appName }}-kafka-keystore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.keystoreSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.microcks.customSecretRef }}
        - name: "{{ .Values.microcks.customSecretRef.secret }}"
          secret:
            secretName: "{{ .Values.microcks.customSecretRef.secret }}"
        {{- end }}
